make the visual effect callbacks sent through the elements shortcuts are getting executed in the scope of the element, and by name calls work too. and then write a doc entry about that.

wrap the show/hide/toggle/radio methods of Element to support the visual effects

implement an automatic effects queueing on an element

add effects options to the resize methods

underscored and ruby aliases

Think about moving the scrolls control out of Element to window.

Create the Element#scrollTo method which will scroll the window to the element

Implement Form unit onFocus onReset callbacks

Create a workout to handle the IE's problems with attributes assignment for the newly created elements

Implement the whitelist option for the String#stripTags method

Implement the document object extensions, like 'ready' event

Write tests for the Cookie object

Think about moving part of the Array extensions to an Enumerable unit

Implement a Hash unit

String#escapeHTML #truncate  ???

there's seems to be a memory leaking problem in IE6, each run makes the test go slower. Investigate what's the problem.

---------
Completed
---------
Implement the xhrs stack to handle the common spinner properly

check that Xhr hides related spinners if was canceled

Rework the observers so that they keep a plain list of cache and see if it will be faster and more compact

Make Observer#listeners return all the listeners if the event name was not specified.

Create alias #includes -> #include

write about function delay/periodical timers 'cancel'/'stop' methods

fx to class

implement the Options module

Write documentation entry about the Element constructor

remove getOwnStyle and getViewStyle out of the method, make the getStyle return the computed styles
make also it return a hash if no params were specified. and remove the getOwn and getView styles out of the documentation

handle the various css naming/values cases. Like opacity, filter, overflow etc.

Add the Element#insertTo method

Make the observer support #observes and #stopObserving check callbacks without event name

Add observer lists of listeners support. Move the by name calls into the generic handler

Fix the manual css-selector E[foo]	an E element with a "foo" attribute

Get rid of the Element static calls

Do Element structural methods review

Fix the build

Think about how to invoke the JavaScript 1.6 map/filter/??? methods

See how to get rid of evals in the Array#_call method

Element.addMethods

Observer#listeners

Observer self calls by name

Regexp#escape

Make Selector unit behave the same way as the native selectors do

Element#radio

add '&methodName' feature to the Array's collect/etc methods
[1,2,3].collect('methodName', [attributes])

try to optimize the search with document.querySelector

implement Array's 'walk' method

add nice evalScripts/extractScripts methods for the String object.

make the Element object have all the Element.Methods in static version, so it was possible to process 
elements faster, without actual extending (where possible).

make it possible to specify the start node for the element matching methods, so it was not get always
matched against the document node and was working faster.

remove unnecessary elements extention requests in the search/select process where it's possible.

see if there's a fancier and more efficient way to test Element instance methods along with the static mirrors